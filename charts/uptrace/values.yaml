# Default values for uptrace.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

clickhouse:
  enabled: true
  replicaCount: 1

  imagePullSecrets: []
  image:
    repository: clickhouse/clickhouse-server
    pullPolicy: IfNotPresent
    tag: '23.11'

  persistence:
    enabled: true
    storageClassName: '' # leave empty to use the default storage class
    size: 8Gi

  service:
    type: ClusterIP
    http_port: 8123
    tcp_port: 9000

  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}
  tolerations: []
  affinity: {}

postgresql:
  enabled: true

  imagePullSecrets: []
  image:
    repository: postgres
    pullPolicy: IfNotPresent
    tag: '15-alpine'

  persistence:
    enabled: true
    storageClassName: '' # leave empty to use the default storage class
    size: 8Gi

  service:
    type: ClusterIP
    port: 5432

  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}
  tolerations: []
  affinity: {}

otelcol:
  enabled: true

  otlpExporter:
    endpoint: http://my-uptrace:14317
    tls: { insecure: true }
    headers: { 'uptrace-dsn': 'http://project1_secret_token@localhost:14317/1' }

  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}
  tolerations: []
  affinity: {}

  config: |
    receivers:
      otlp:
        protocols:
          grpc:
          http:
      k8s_cluster:
        auth_type: serviceAccount
        collection_interval: 15s
      kubeletstats:
        collection_interval: 15s
        auth_type: "serviceAccount"
        endpoint: "https://${env:K8S_NODE_NAME}:10250"
        insecure_skip_verify: true
      filelog:
        include: [ /var/log/pods/*/*/*.log ]
        include_file_name: false
        include_file_path: true
        start_at: end  # Recommended: use "end" for production
        operators:
          - type: router
            id: get-format
            routes:
              - expr: body matches "^\\{"
                output: parser-docker
              - expr: body matches "^[^ Z]+ "
                output: parser-crio
              - expr: body matches "^[^ Z]+Z"
                output: parser-containerd
          - type: regex_parser
            id: parser-crio
            output: extract_metadata_from_filepath
            regex: ^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
            timestamp:
              layout: 2006-01-02T15:04:05.999999999Z07:00
              layout_type: gotime
              parse_from: attributes.time
          - type: regex_parser
            id: parser-containerd
            output: extract_metadata_from_filepath
            regex: ^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
            timestamp:
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
              parse_from: attributes.time
          - type: json_parser
            id: parser-docker
            output: extract_metadata_from_filepath
            timestamp:
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
              parse_from: attributes.time
          - type: regex_parser
            id: extract_metadata_from_filepath
            parse_from: attributes["log.file.path"]
            regex: ^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]+)\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$
          - type: move
            from: attributes.stream
            to: attributes["log.iostream"]
          - type: move
            from: attributes.container_name
            to: resource["k8s.container.name"]
          - type: move
            from: attributes.namespace
            to: resource["k8s.namespace.name"]
          - type: move
            from: attributes.pod_name
            to: resource["k8s.pod.name"]
          - type: move
            from: attributes.restart_count
            to: resource["k8s.container.restart_count"]
          - type: move
            from: attributes.uid
            to: resource["k8s.pod.uid"]
          - type: move
            from: attributes.log
            to: body

    processors:
      resourcedetection:
        detectors: ['system', 'k8snode']
      cumulativetodelta:
      batch:
        send_batch_size: 10000
        timeout: 15s

    exporters:
      debug:
      otlp/local:
        endpoint: http://my-uptrace:14317
        tls: { insecure: true }
        headers: { 'uptrace-dsn': 'http://project1_secret_token@localhost:14317/1' }

    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [batch]
          exporters: [otlp/local]
        metrics:
          receivers: [otlp, k8s_cluster, kubeletstats]
          processors: [cumulativetodelta, batch]
          exporters: [debug, otlp/local]
        logs:
          receivers: [otlp, k8s_cluster, filelog]
          processors: [batch, resourcedetection]
          exporters: [debug, otlp/local]

nameOverride: ''
fullnameOverride: ''

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ''

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

ingress:
  enabled: true
  className: ''
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: uptrace.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

uptrace:
  replicaCount: 1
  imagePullSecrets: []

  image:
    repository: uptrace/uptrace
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP # or LoadBalancer
    http_port: 14318
    grpc_port: 14317
    annotations:
      {}
      # service.beta.kubernetes.io/aws-load-balancer-type: "external"
      # service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "ip"
    loadBalancerSourceRanges:
      []
      # - "10.0.0.0/8"
      # - "20.0.0.0/8"

  ## Provided env variables for uptrace container
  ## You can use those variables in uptrace.config
  ## Values are same as here https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
  env:
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName

  ## Provided additional env variables sources for uptrace container
  ## You can use those variables in uptrace.config
  ## https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/#define-an-environment-variable-for-a-container
  envFrom: []

  config:
    ##
    ## Uptrace configuration file.
    ## See https://uptrace.dev/get/config.html for details.
    ##
    ## You can use environment variables anywhere in this file, for example:
    ##
    ##   foo: $FOO
    ##   bar: ${BAR}
    ##   baz: ${BAZ:default}
    ##
    ## To escape `$`, use `$$`, for example:
    ##
    ##   foo: $$FOO_BAR
    ##

    ##
    ## ClickHouse database credentials.
    ##
    ch:
      addr: uptrace-clickhouse:9000
      user: default
      password:
      database: uptrace

      # TLS configuration. Uncomment to enable.
      # tls:
      #   insecure_skip_verify: true # only for self-signed certificates

      # Maximum query execution time.
      max_execution_time: 30s

    ##
    ## SQLite/PostgreSQL db that is used to store metadata such us metric names, dashboards, alerts,
    ## and so on.
    ##
    pg:
      addr: uptrace-postgresql:5432
      user: uptrace
      password: uptrace
      database: uptrace
      #tls: { insecure_skip_verify: true }

    ##
    ## A list of pre-configured projects. Each project is fully isolated.
    ##
    projects:
      # Conventionally, the first project is used to monitor Uptrace itself.
      - id: 1
        name: Uptrace
        # Token grants write access to the project. Keep a secret.
        token: project1_secret_token
        pinned_attrs:
          - service_name
          - host_name
          - deployment_environment
        # Group spans by deployment.environment attribute.
        group_by_env: false
        # Group funcs spans by service.name attribute.
        group_funcs_by_service: false
        # Enable prom_compat if you want to use the project as a Prometheus datasource in Grafana.
        prom_compat: true

      # Other projects can be used to monitor your applications.
      # To monitor micro-services or multiple related services, use a single project.
      - id: 2
        name: My project
        token: project2_secret_token
        pinned_attrs:
          - service_name
          - host_name
          - deployment_environment
        prom_compat: true

    auth:
      users:
        - name: Anonymous
          email: uptrace@localhost
          password: uptrace
          notify_by_email: true

      # Cloudflare Zero Trust Access (Identity)
      # See https://developers.cloudflare.com/cloudflare-one/identity/ for more info.
      # cloudflare:
      #   # The base URL of the Cloudflare Zero Trust team.
      #   - team_url: https://myteam.cloudflareaccess.com
      #     # The Application Audience (AUD) Tag for this application.
      #     # You can retrieve this from the Cloudflare Zero Trust 'Access' Dashboard.
      #     audience: bea6df23b944e4a0cd178609ba1bb64dc98dfe1f66ae7b918e563f6cf28b37e0

      # OpenID Connect (Single Sign-On)
      # oidc:
      #   # The ID is used in API endpoints, for example, in redirect URL
      #   # `http://<uptrace-host>/api/v1/sso/<oidc-id>/callback`.
      #   - id: keycloak
      #     # Display name for the button in the login form.
      #     # Default to 'OpenID Connect'
      #     display_name: Keycloak
      #     # The base URL for the OIDC provider.
      #     issuer_url: http://localhost:8080/realms/uptrace
      #     # The OAuth 2.0 Client ID
      #     client_id: uptrace
      #     # The OAuth 2.0 Client Secret
      #     client_secret: ogbhd8Q0X0e5AZFGSG3m9oirPvnetqkA
      #     # Additional OAuth 2.0 scopes to request from the OIDC provider.
      #     # Defaults to 'profile'. 'openid' is requested by default and need not be specified.
      #     scopes:
      #       - profile
      #     # The OIDC UserInfo claim to use as the user's username.
      #     # Defaults to 'preferred_username'.
      #     claim: preferred_username

    ##
    ## Various options to tweak ClickHouse schema.
    ## For changes to take effect, you need reset the ClickHouse database with `ch reset`.
    ##
    ch_schema:
      # Compression codec, for example, LZ4, ZSTD(3), or Default.
      compression: ZSTD(3)

      # Whether to use Replicated* engines.
      replicated: false

      # Cluster name for Distributed tables and ON CLUSTER clause.
      #cluster: uptrace1

      spans:
        # Delete spans data after 30 days.
        ttl_delete: 7 DAY
        storage_policy: 'default'

      metrics:
        # Delete metrics data after 90 days.
        ttl_delete: 30 DAY
        storage_policy: 'default'

    ##
    ## Addresses on which Uptrace receives gRPC and HTTP requests.
    ##
    listen:
      # OTLP/gRPC API.
      grpc:
        addr: ':14317'

      # OTLP/HTTP API and Uptrace API with Vue UI.
      http:
        addr: ':14318'

      # tls:
      #   cert_file: config/tls/uptrace.crt
      #   key_file: config/tls/uptrace.key

    ##
    ## Various options for Uptrace UI.
    ##
    site:
      # Overrides public URL for Vue-powered UI.
      addr: 'http://localhost:14318/'

    ##
    ## Spans processing options.
    ##
    spans:
      # The size of the Go chan used to buffer incoming spans.
      # If the buffer is full, Uptrace starts to drop spans.
      #buffer_size: 100000

      # The number of spans to insert in a single query.
      #batch_size: 10000

    ##
    ## Metrics processing options.
    ##
    metrics:
      # List of attributes to drop for being noisy.
      drop_attrs:
        - telemetry_sdk_language
        - telemetry_sdk_name
        - telemetry_sdk_version

      # The size of the Go chan used to buffer incoming measures.
      # If the buffer is full, Uptrace starts to drop measures.
      #buffer_size: 100000

      # The number of measures to insert in a single query.
      #batch_size: 10000

      # The size of the buffer for converting cumulative metrics to delta.
      #cum_to_delta_size: 100000

    ##
    ## SMTP settings to send emails.
    ## https://uptrace.dev/get/alerting.html
    ##
    smtp_mailer:
      enabled: false
      host: localhost
      port: 1025
      username: mailhog
      password: mailhog
      from: 'uptrace@localhost'

    ##
    ## uptrace-go client configuration.
    ## Uptrace sends internal telemetry here. Defaults to listen.grpc.addr.
    ##
    uptrace_go:
      # dsn: http://project1_secret_token@localhost:14317/1
      # tls:
      #   cert_file: config/tls/uptrace.crt
      #   key_file: config/tls/uptrace.key
      #   insecure_skip_verify: true

    ##
    ## Logging configuration.
    ##
    logging:
      # Zap minimal logging level.
      # Valid values: DEBUG, INFO, WARN, ERROR, DPANIC, PANIC, FATAL.
      level: INFO

    # Secret key that is used to sign JWT tokens etc.
    secret_key: 102c1a557c314fc28198acd017960843

    # Enable to log HTTP requests and database queries.
    debug: false

  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}
  tolerations: []
  affinity: {}
