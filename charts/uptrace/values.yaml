# Default values for uptrace.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: ''
fullnameOverride: ''

# Annotations for pod templates.
podAnnotations: {}

# Security context for pod templates.
podSecurityContext:
  {}
  # fsGroup: 2000

# Security context for containers.
containerSecurityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ''

clickhouse:
  enabled: true
  replicaCount: 1

  imagePullSecrets: []
  image:
    repository: clickhouse/clickhouse-server
    pullPolicy: IfNotPresent
    tag: '25.3'

  persistence:
    enabled: true
    storageClassName: '' # leave empty to use the default storage class
    size: 8Gi

  service:
    type: ClusterIP
    http_port: 8123
    tcp_port: 9000

  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}
  tolerations: []
  affinity: {}

postgresql:
  enabled: true

  imageName: ghcr.io/cloudnative-pg/postgresql:17
  imagePullSecrets: []

  instances: 3

  storage:
    size: 4Gi
    storageClass: ''

  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}
  tolerations: []
  affinity: {}

# Optional OpenTelemetry Collector deployment.
otelcol:
  enabled: true

  config:
    receivers:
      otlp:
        protocols:
          grpc: {}
          http: {}
      k8s_cluster:
        auth_type: serviceAccount
        collection_interval: 15s
    processors:
      resourcedetection:
        detectors: ['system']
      cumulativetodelta:
      batch:
        send_batch_size: 10000
        timeout: 15s
    exporters:
      debug: {}
      otlp/local:
        endpoint: http://uptrace:4317
        tls: { insecure: true }
        headers: { 'uptrace-dsn': 'http://project1_secret@uptrace.local?grpc=4317' }
    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [batch]
          exporters: [otlp/local]
        metrics:
          receivers: [otlp, k8s_cluster]
          processors: [cumulativetodelta, batch]
          exporters: [debug, otlp/local]
        logs:
          receivers: [otlp, k8s_cluster]
          processors: [batch]
          exporters: [debug, otlp/local]

  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}
  tolerations: []
  affinity: {}

otelcolDaemonset:
  enabled: true

  config:
    receivers:
      hostmetrics:
        collection_interval: 15s
        scrapers:
          cpu: {}
          disk: {}
          filesystem: {}
          load: {}
          memory: {}
          network: {}
          paging: {}
      kubeletstats:
        collection_interval: 15s
        auth_type: 'serviceAccount'
        endpoint: 'https://${env:K8S_NODE_NAME}:10250'
        insecure_skip_verify: true

    processors:
      cumulativetodelta: {}
      k8sattributes: {}
      batch:
        send_batch_size: 10000
        timeout: 10s

    exporters:
      debug: {}
      otlp/local:
        endpoint: http://uptrace:4317
        tls: { insecure: true }
        headers: { 'uptrace-dsn': 'http://project1_secret@uptrace.local?grpc=4317' }

    service:
      pipelines:
        metrics:
          receivers: [hostmetrics, kubeletstats]
          processors: [k8sattributes, cumulativetodelta, batch]
          exporters: [debug, otlp/local]

ingress:
  enabled: true
  className: ''
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    #
    # For example, to inject the `url` value from the `site` section, use:
    #
    # - host: '{{ .Values.uptrace.site.url }}'
    #   paths:
    #     - path: /
    #       pathType: Prefix
    - host: uptrace.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

uptrace:
  replicaCount: 1
  imagePullSecrets: []

  image:
    repository: uptrace/uptrace
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP # or LoadBalancer
    http_port: 80
    grpc_port: 4317
    annotations:
      {}
      # service.beta.kubernetes.io/aws-load-balancer-type: "external"
      # service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "ip"
    loadBalancerSourceRanges:
      []
      # - "10.0.0.0/8"
      # - "20.0.0.0/8"

  ## Provided env variables for uptrace container
  ## You can use those variables in uptrace.config
  ## Values are same as here https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
  env:
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName

  ## Provided additional env variables sources for uptrace container
  ## You can use those variables in uptrace.config
  ## https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/#define-an-environment-variable-for-a-container
  envFrom: []

  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}
  tolerations: []
  affinity: {}

  config:
    ##
    ## Uptrace configuration.
    ## See https://uptrace.dev/get/hosted/config for details.
    ##
    ## You can use environment variables anywhere in this file, for example:
    ##
    ##   foo: $FOO
    ##   bar: ${BAR}
    ##   baz: ${BAZ:default}
    ##
    ## To escape `$`, use `$$`, for example:
    ##
    ##   foo: $$FOO_BAR
    ##
    ## Can be used with the `tpl` function to inject values from the values.yaml file.
    ## For example, to inject the `url` value from the `site` section, use:
    ##
    ##   site:
    ##     url: '{{ .Values.uptrace.site.url }}'

    ##
    ## Service configuration options.
    ##
    service:
      env: hosted
      secret: 'FIXME'

    ##
    ## Site configuration options.
    ##
    site:
      # HTTP endpoint for the UI and DSN.
      # Unless you use a reverse proxy, the port here should match the port in the listen.http.addr.
      url: 'http://uptrace.local'

    ##
    ## Addresses on which Uptrace receives gRPC and HTTP requests.
    ##
    listen:
      # OTLP/HTTP API and Uptrace API with Vue UI.
      http:
        addr: ':80'

      # OTLP/gRPC API.
      grpc:
        addr: ':4317'

      # TLS configuration for both HTTP and gRPC. Uncomment to enable.
      #tls:
      #  cert_file: config/tls/uptrace.crt
      #  key_file: config/tls/uptrace.key

    ##
    ## Authentication configuration options.
    ##
    auth:
      # Disable auth using login and password.
      # SSO auth will still be available.
      #disabled: true

      # The following users will be created on the first startup.
      users:
        - name: Admin
          email: admin@uptrace.local
          password: admin
          auth_tokens: ['user1_secret']

    ##
    ## ClickHouse database credentials.
    ##
    ch_cluster:
      cluster: 'uptrace1'
      # Whether to use ClickHouse replication.
      # Cluster name is required when replication is enabled.
      replicated: false
      # Whether to use ClickHouse distributed tables.
      distributed: false

      shards:
        - replicas:
            - addr: 'clickhouse-uptrace1:9000'
              database: uptrace
              user: uptrace
              password: uptrace

              dial_timeout: 3s
              write_timeout: 5s
              max_retries: 3

              max_execution_time: 15s
              query_settings:
                async_insert: 1
                query_cache_nondeterministic_function_handling: 'save'
                allow_suspicious_types_in_group_by: 1
                allow_suspicious_types_in_order_by: 1

    ##
    ## Various options to tweak ClickHouse schema.
    ## For changes to take effect, you need reset the ClickHouse database with `ch reset`.
    ##
    ch_schema:
      # Compression codec, for example, LZ4, ZSTD(1), or Default.
      compression: ZSTD(1)

      spans_index:
        storage_policy: 'default'

      spans_data:
        storage_policy: 'default'

      logs_index:
        storage_policy: 'default'

      logs_data:
        storage_policy: 'default'

      events_index:
        storage_policy: 'default'

      events_data:
        storage_policy: 'default'

      metrics:
        storage_policy: 'default'

    ##
    ## PostgreSQL database credentials. The main database stores 99% of data
    ## such as users, projects, dashboards, etc.
    ##
    pg:
      addr: 'uptrace-postgresql-rw:5432'
      user: ${PG_USER:uptrace}
      password: ${PG_PASSWORD:uptrace}
      database: ${PG_DATABASE:uptrace}

      # TLS client configuration. Uncomment to enable.
      #tls:
      #  insecure_skip_verify: true # only for self-signed certificates

    ##
    ## TLS certificate issuance and renewal using Let's Encrypt.
    ##
    certmagic:
      # Use Let's Encrypt to obtain certificates.
      enabled: false
      # Use Let's Encrypt staging environment.
      staging_ca: false
      http_challenge_addr: ':80'

    ##
    ## To receive email notifications, configure a mailer.
    ## https://uptrace.dev/features/alerting
    ##
    mailer:
      smtp:
        # Whether to use this mailer for sending emails.
        enabled: false
        # SMTP server host.
        host: localhost
        # SMTP server port.
        port: 1025
        # Username for authentication.
        username: mailhog
        # Password for authentication.
        password: mailhog
        # Uncomment to disable opportunistic TLS.
        #tls: { disabled: true }
        # Emails will be send from this address.
        from: 'uptrace@uptrace.local'

    ##
    ## Spans processing options.
    ##
    spans:
      # Max number of goroutines processing spans.
      # Default is GOMAXPROCS.
      #max_threads: 10

      # Max number of spans to insert in a single query.
      #max_insert_size: 10000

      # Max number of buffered spans. If the buffer is full, spans are dropped.
      # Default scales linearly with max_threads.
      #max_buffered_records: 100e3

    ##
    ## Logs processing options.
    ##
    logs:
      # Max number of goroutines processing logs.
      # Default is GOMAXPROCS.
      #max_threads: 10

      # Max number of logs to insert in a single query.
      #max_insert_size: 10000

      # Max number of buffered logs. If the buffer is full, logs are dropped.
      # Default scales linearly with max_threads.
      #max_buffered_records: 100e3

    ##
    ## Events processing options.
    ##
    events:
      # Max number of goroutines processing events.
      # Default is GOMAXPROCS.
      #max_threads: 10

      # Max number of events to insert in a single query.
      #max_insert_size: 10000

      # Max number of buffered events. If the buffer is full, events are dropped.
      # Default scales linearly with max_threads.
      #max_buffered_records: 100e3

    ##
    ## Metrics processing options.
    ##
    metrics:
      # Max number of goroutines processing datapoints.
      # Default is GOMAXPROCS.
      #max_threads: 10

      # Max number of datapoints to insert in a single query.
      #max_insert_size: 10000

      # Max number of buffered datapoints. If the buffer is full, datapoints are dropped.
      # Default scales linearly with max_threads.
      #max_buffered_records: 100e3

      # Max number of cumulative timeseries to convert into delta timeseries.
      # Default scales linearly with max_threads.
      #max_cumulative_timeseries: 1e6

    ##
    ## Trace constructing limits.
    ##
    trace:
      # Max number of spans, logs, and events to select.
      #query_limit: 200_000

      # Max number of bytes to select.
      #max_memory_usage_bytes: 200_000_000

    ###
    ### Alerting options.
    ###
    alerting:
      # Uncomment to disable monitors and notifications.
      #disabled: true

    ###
    ### Service graph processing options.
    ###
    service_graph:
      # Uncomment to disable.
      #disabled: true

    ##
    ## Sourcemaps processing options for JavaScript errors.
    ## Sourcemaps require Internet access to download source maps.
    ##
    sourcemaps:
      # Uncomment to disable.
      #disabled: true

    ##
    ## Redis database credentials for go-redis RedisRing client.
    ##
    redis_cache:
      addrs:
        alpha: 'redis-master:6379'

    ##
    ## uptrace-go client configuration.
    ## Uptrace sends internal telemetry here.
    ##
    uptrace_go:
      # Uncomment to disable.
      #disabled: true
      dsn: http://project1_secret@uptrace:80?grpc=4317

    ##
    ## Token for the Telegram bot that will be sending notifications to Telegram channels.
    ## Required if you are planning to use Telegram for notifications.
    ##
    ## To create a new bot, follow this guide:
    ## https://sendpulse.com/knowledge-base/chatbot/telegram/create-telegram-chatbot
    ##
    telegram:
      bot_token: ''

    ##
    ## Logging configuration options.
    ##
    logging:
      # Valid values: DEBUG, INFO, WARN, ERROR.
      level: INFO

    ##
    ## License information.
    ##
    license:
      data: ''
      # path: /path/to/uptrace/license
